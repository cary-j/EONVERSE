-- Compiled with roblox-ts v2.1.0
local TS = _G[script]
local _services = TS.import(script, TS.getModule(script, "@rbxts", "services"))
local ReplicatedStorage = _services.ReplicatedStorage
local RunService = _services.RunService
local function populateInstanceMap(className, globalName, names, map)
	if not RunService:IsRunning() then
		for _, name in names do
			local instance = Instance.new(className)
			instance.Name = name
			map[name] = instance
		end
		return nil
	end
	local remotes = if RunService:IsServer() then ReplicatedStorage:FindFirstChild(globalName) else ReplicatedStorage:WaitForChild(globalName)
	if not remotes then
		remotes = Instance.new("Folder")
		remotes.Name = globalName
		remotes.Parent = ReplicatedStorage
	end
	for _, name in names do
		if RunService:IsClient() then
			local instance = remotes:WaitForChild(name)
			if instance:IsA(className) then
				map[name] = instance
			end
		else
			local instance = remotes:FindFirstChild(name)
			if instance then
				if not instance:IsA(className) then
					error("Found " .. (name .. " but it is not a remote."))
				end
				map[name] = instance
			else
				local remote = Instance.new(className)
				remote.Name = name
				remote.Parent = remotes
				map[name] = remote
			end
		end
	end
end
return {
	populateInstanceMap = populateInstanceMap,
}
