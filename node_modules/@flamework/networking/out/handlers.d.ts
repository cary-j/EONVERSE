/// <reference types="signal" />
/// <reference types="@rbxts/types" />
/// <reference types="@rbxts/types" />
/// <reference types="@rbxts/compiler-types" />
import Signal from "@rbxts/signal";
import { NetworkInfo } from "./types";
type SignalCallback<T> = T extends Signal<infer C> ? C : never;
type NetworkEvents = typeof NetworkEvents;
declare const NetworkEvents: {
    readonly onBadRequest: Signal<(player: Player, event: NetworkInfo, failedArg: number) => void, false>;
    readonly onBadResponse: Signal<(player: Player, event: NetworkInfo) => void, false>;
};
export declare function registerNetworkHandler<T extends keyof NetworkEvents>(event: T, callback: SignalCallback<NetworkEvents[T]>): RBXScriptConnection;
export declare function fireNetworkHandler<T extends keyof NetworkEvents>(event: T, ...args: Parameters<SignalCallback<NetworkEvents[T]>>): void;
export {};
