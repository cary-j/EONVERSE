"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkingCreateEventMacro = void 0;
var typescript_1 = __importDefault(require("typescript"));
var diagnostics_1 = require("../../../../classes/diagnostics");
var factory_1 = require("../../../../util/factory");
var buildGuardFromType_1 = require("../../../../util/functions/buildGuardFromType");
var uid_1 = require("../../../../util/uid");
exports.NetworkingCreateEventMacro = {
    getSymbol: function (state) {
        if (!state.symbolProvider.networking)
            return [];
        return [
            state.symbolProvider.networking.get("createEvent"),
            state.symbolProvider.networking.get("createFunction"),
        ];
    },
    transform: function (state, node, macro) {
        var _a, _b, _c;
        var file = state.getSourceFile(node);
        var signature = state.typeChecker.getResolvedSignature(node);
        var serverTypeArg = (_a = node.typeArguments) === null || _a === void 0 ? void 0 : _a[0];
        var clientTypeArg = (_b = node.typeArguments) === null || _b === void 0 ? void 0 : _b[1];
        if (!serverTypeArg)
            diagnostics_1.Diagnostics.error(node, "Missing ServerType type argument");
        if (!clientTypeArg)
            diagnostics_1.Diagnostics.error(node, "Missing ClientType type argument");
        if (!signature)
            diagnostics_1.Diagnostics.error(node, "Signature could not be resolved");
        var serverType = state.typeChecker.getTypeAtLocation(serverTypeArg);
        var clientType = state.typeChecker.getTypeAtLocation(clientTypeArg);
        if (!serverType)
            diagnostics_1.Diagnostics.error(serverTypeArg, "Could not get type");
        if (!clientType)
            diagnostics_1.Diagnostics.error(clientTypeArg, "Could not get type");
        var parentDeclaration = node.parent;
        if (!factory_1.f.is.namedDeclaration(parentDeclaration))
            return diagnostics_1.Diagnostics.error(node, "Must be under a declaration.");
        var convertTypeToGuardArray = function (type, source, generateReturn) {
            var e_1, _a, e_2, _b;
            var _c, _d, _e, _f;
            if (generateReturn === void 0) { generateReturn = false; }
            var assignments = new Array();
            try {
                for (var _g = __values(type.getProperties()), _h = _g.next(); !_h.done; _h = _g.next()) {
                    var prop = _h.value;
                    var propType = state.typeChecker.getTypeOfPropertyOfType(type, prop.name);
                    if (!propType)
                        diagnostics_1.Diagnostics.error(source, "Could not get property type ".concat(prop.name));
                    var propSource = (_e = (_c = prop.valueDeclaration) !== null && _c !== void 0 ? _c : (_d = prop.declarations) === null || _d === void 0 ? void 0 : _d[0]) !== null && _e !== void 0 ? _e : source;
                    var callSignature = propType.getCallSignatures()[0];
                    if (!callSignature)
                        diagnostics_1.Diagnostics.error(propSource, "This type does not have a call signature");
                    var guards = new Array();
                    var restGuard = factory_1.f.nil();
                    try {
                        for (var _j = (e_2 = void 0, __values(callSignature.parameters)), _k = _j.next(); !_k.done; _k = _j.next()) {
                            var param = _k.value;
                            var paramType = state.typeChecker.getTypeOfSymbolAtLocation(param, node);
                            var parameterDeclaration = param.valueDeclaration;
                            if (parameterDeclaration && typescript_1.default.isRestParameter(parameterDeclaration)) {
                                var elementType = state.typeChecker.getElementTypeOfArrayType(paramType);
                                if (elementType) {
                                    restGuard = (0, buildGuardFromType_1.buildGuardFromType)(state, parameterDeclaration, elementType, file);
                                }
                                break;
                            }
                            guards.push((0, buildGuardFromType_1.buildGuardFromType)(state, parameterDeclaration !== null && parameterDeclaration !== void 0 ? parameterDeclaration : callSignature.getDeclaration(), paramType, file));
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_k && !_k.done && (_b = _j.return)) _b.call(_j);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                    assignments.push(factory_1.f.propertyAssignmentDeclaration(state.obfuscateText(prop.name, "remotes"), generateReturn
                        ? [
                            [guards, restGuard],
                            (0, buildGuardFromType_1.buildGuardFromType)(state, (_f = callSignature.getDeclaration().type) !== null && _f !== void 0 ? _f : callSignature.getDeclaration(), callSignature.getReturnType(), file),
                        ]
                        : [guards, restGuard]));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_h && !_h.done && (_a = _g.return)) _a.call(_g);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return state.obfuscateArray(assignments);
        };
        var isFunction = macro.symbol === macro.symbols[1];
        var networkingPath = isFunction ? "functions" : "events";
        var networkingCreateName = isFunction ? "createNetworkingFunction" : "createNetworkingEvent";
        var createNetworkingEvent = state.addFileImport(file, "@flamework/networking/out/".concat(networkingPath, "/").concat(networkingCreateName), networkingCreateName);
        var obfuscatedServerTypeArg = createObfuscatedType(state, serverTypeArg, serverType);
        var obfuscatedClientTypeArg = createObfuscatedType(state, clientTypeArg, clientType);
        return factory_1.f.update.call(node, createNetworkingEvent, [
            (0, uid_1.getNodeUid)(state, parentDeclaration),
            factory_1.f.object(convertTypeToGuardArray(serverType, serverTypeArg, isFunction)),
            factory_1.f.object(convertTypeToGuardArray(clientType, clientTypeArg, isFunction)),
            obfuscateMiddleware(state, node.arguments[0]),
            obfuscateMiddleware(state, node.arguments[1]),
            (_c = node.arguments[2]) !== null && _c !== void 0 ? _c : factory_1.f.nil(),
        ], [obfuscatedServerTypeArg, obfuscatedClientTypeArg]);
    },
};
function obfuscateMiddleware(state, expression) {
    if (factory_1.f.is.object(expression)) {
        return factory_1.f.update.object(expression, state.obfuscateArray(expression.properties).map(function (prop) {
            if (factory_1.f.is.propertyAssignmentDeclaration(prop) && "text" in prop.name) {
                return factory_1.f.update.propertyAssignmentDeclaration(prop, prop.initializer, factory_1.f.string(state.obfuscateText(prop.name.text, "remotes")));
            }
            return prop;
        }));
    }
    return factory_1.f.nil();
}
function createObfuscatedType(state, originType, node) {
    return state.config.obfuscation
        ? factory_1.f.typeLiteralType(node
            .getProperties()
            .map(function (x) {
            return factory_1.f.propertySignatureType(factory_1.f.string(state.obfuscateText(x.name, "remotes")), factory_1.f.indexedAccessType(originType, factory_1.f.literalType(factory_1.f.string(x.name))));
        }))
        : originType;
}
