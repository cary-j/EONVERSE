"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformUserMacro = void 0;
var crypto_1 = require("crypto");
var typescript_1 = __importDefault(require("typescript"));
var diagnostics_1 = require("../classes/diagnostics");
var factory_1 = require("../util/factory");
var buildGuardFromType_1 = require("../util/functions/buildGuardFromType");
var uid_1 = require("../util/uid");
function transformUserMacro(state, node, signature) {
    var args = node.arguments ? __spreadArray([], __read(node.arguments), false) : [];
    var parameters = new Map();
    var highestParameterIndex = -1;
    for (var i = 0; i < getParameterCount(state, signature); i++) {
        var targetParameter = state.typeChecker.getParameterType(signature, i).getNonNullableType();
        var userMacro = getUserMacroOfType(state, node, targetParameter);
        if (userMacro) {
            parameters.set(i, userMacro);
            highestParameterIndex = Math.max(highestParameterIndex, i);
        }
    }
    for (var i = 0; i <= highestParameterIndex; i++) {
        var userMacro = parameters.get(i);
        if (userMacro && isUndefinedArgument(args[i])) {
            args[i] = buildUserMacro(state, node, userMacro);
        }
        else {
            args[i] = args[i] ? state.transform(args[i]) : factory_1.f.nil();
        }
    }
    if (highestParameterIndex >= 0) {
        if (typescript_1.default.isNewExpression(node)) {
            return typescript_1.default.factory.updateNewExpression(node, state.transformNode(node.expression), node.typeArguments, args);
        }
        else if (typescript_1.default.isCallExpression(node)) {
            return typescript_1.default.factory.updateCallExpression(node, state.transformNode(node.expression), node.typeArguments, args);
        }
        else {
            diagnostics_1.Diagnostics.error(node, "Macro could not be transformed.");
        }
    }
    return state.transform(node);
}
exports.transformUserMacro = transformUserMacro;
function isUndefinedArgument(argument) {
    return argument ? factory_1.f.is.identifier(argument) && argument.text === "undefined" : true;
}
function getLabels(state, type) {
    var e_1, _a;
    if (!isTupleType(state, type)) {
        return {
            kind: "literal",
            value: undefined,
        };
    }
    var names = new Array();
    var declarations = type.target.labeledElementDeclarations;
    if (!declarations) {
        return {
            kind: "literal",
            value: undefined,
        };
    }
    try {
        for (var declarations_1 = __values(declarations), declarations_1_1 = declarations_1.next(); !declarations_1_1.done; declarations_1_1 = declarations_1.next()) {
            var namedMember = declarations_1_1.value;
            names.push({
                kind: "literal",
                value: namedMember.name.text,
            });
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (declarations_1_1 && !declarations_1_1.done && (_a = declarations_1.return)) _a.call(declarations_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return {
        kind: "many",
        members: names,
    };
}
function buildUserMacro(state, node, macro) {
    var e_2, _a;
    var members = new Array();
    if (macro.kind === "generic") {
        if (macro.metadata.has("id")) {
            members.push(["id", factory_1.f.string((0, uid_1.getTypeUid)(state, macro.target, node))]);
        }
        if (macro.metadata.has("guard")) {
            members.push(["guard", (0, buildGuardFromType_1.buildGuardFromType)(state, node, macro.target)]);
        }
        if (macro.metadata.has("text")) {
            members.push(["text", factory_1.f.string(state.typeChecker.typeToString(macro.target))]);
        }
    }
    else if (macro.kind === "caller") {
        var lineAndCharacter = typescript_1.default.getLineAndCharacterOfPosition(node.getSourceFile(), node.getStart());
        if (macro.metadata.has("line")) {
            members.push(["line", factory_1.f.number(lineAndCharacter.line + 1)]);
        }
        if (macro.metadata.has("character")) {
            members.push(["character", factory_1.f.number(lineAndCharacter.character + 1)]);
        }
        if (macro.metadata.has("width")) {
            members.push(["width", factory_1.f.number(node.getWidth())]);
        }
        if (macro.metadata.has("uuid")) {
            members.push(["uuid", factory_1.f.string((0, crypto_1.randomUUID)())]);
        }
        if (macro.metadata.has("text")) {
            members.push(["text", factory_1.f.string(node.getText())]);
        }
    }
    else if (macro.kind === "many") {
        if (Array.isArray(macro.members)) {
            return factory_1.f.asNever(factory_1.f.array(macro.members.map(function (userMacro) { return buildUserMacro(state, node, userMacro); })));
        }
        else {
            var elements = new Array();
            try {
                for (var _b = __values(macro.members), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var _d = __read(_c.value, 2), name_1 = _d[0], userMacro = _d[1];
                    elements.push(factory_1.f.propertyAssignmentDeclaration(factory_1.f.string(name_1), buildUserMacro(state, node, userMacro)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
            return factory_1.f.asNever(factory_1.f.object(elements, false));
        }
    }
    else if (macro.kind === "literal") {
        var value = macro.value;
        return factory_1.f.asNever(typeof value === "string"
            ? factory_1.f.string(value)
            : typeof value === "number"
                ? factory_1.f.number(value)
                : typeof value === "boolean"
                    ? factory_1.f.bool(value)
                    : factory_1.f.nil());
    }
    var modding = state.addFileImport(node.getSourceFile(), "@flamework/core", "Modding");
    if (members.length === 1) {
        return factory_1.f.call(factory_1.f.propertyAccessExpression(modding, factory_1.f.identifier("macro")), [members[0][0], members[0][1]]);
    }
    return factory_1.f.call(factory_1.f.propertyAccessExpression(modding, factory_1.f.identifier("macro")), [
        factory_1.f.array(members.map(function (_a) {
            var _b = __read(_a, 2), name = _b[0], value = _b[1];
            return factory_1.f.array([factory_1.f.string(name), value]);
        })),
    ]);
}
function getMetadataFromType(metadataType) {
    var e_3, _a;
    var metadata = new Set();
    try {
        // Metadata is represented as { [k in Metadata]: k } to preserve assignability.
        for (var _b = __values(metadataType.checker.getPropertiesOfType(metadataType)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var property = _c.value;
            metadata.add(property.name);
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_3) throw e_3.error; }
    }
    return metadata;
}
function getUserMacroOfMany(state, node, target) {
    var e_4, _a, e_5, _b, e_6, _c;
    var basicUserMacro = getBasicUserMacro(state, target);
    if (basicUserMacro) {
        return basicUserMacro;
    }
    if (isTupleType(state, target)) {
        var userMacros = new Array();
        try {
            for (var _d = __values(state.typeChecker.getTypeArguments(target)), _e = _d.next(); !_e.done; _e = _d.next()) {
                var member = _e.value;
                var userMacro = getUserMacroOfMany(state, node, member);
                if (!userMacro)
                    return;
                userMacros.push(userMacro);
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
            }
            finally { if (e_4) throw e_4.error; }
        }
        return {
            kind: "many",
            members: userMacros,
        };
    }
    else if (state.typeChecker.isArrayType(target)) {
        var targetType = state.typeChecker.getTypeArguments(target)[0];
        var constituents = targetType.isUnion() ? targetType.types : [targetType];
        var userMacros = new Array();
        try {
            for (var constituents_1 = __values(constituents), constituents_1_1 = constituents_1.next(); !constituents_1_1.done; constituents_1_1 = constituents_1.next()) {
                var member = constituents_1_1.value;
                // `never` may be encountered when a union has no contituents, so we should just return an empty array.
                if (member.flags & typescript_1.default.TypeFlags.Never) {
                    break;
                }
                var userMacro = getUserMacroOfMany(state, node, member);
                if (!userMacro)
                    return;
                userMacros.push(userMacro);
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (constituents_1_1 && !constituents_1_1.done && (_b = constituents_1.return)) _b.call(constituents_1);
            }
            finally { if (e_5) throw e_5.error; }
        }
        return {
            kind: "many",
            members: userMacros,
        };
    }
    else if (isObjectType(target)) {
        var userMacros = new Map();
        try {
            for (var _f = __values(target.getProperties()), _g = _f.next(); !_g.done; _g = _f.next()) {
                var member = _g.value;
                var memberType = state.typeChecker.getTypeOfPropertyOfType(target, member.name);
                if (!memberType)
                    return;
                var userMacro = getUserMacroOfMany(state, node, memberType);
                if (!userMacro)
                    return;
                userMacros.set(member.name, userMacro);
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (_g && !_g.done && (_c = _f.return)) _c.call(_f);
            }
            finally { if (e_6) throw e_6.error; }
        }
        return {
            kind: "many",
            members: userMacros,
        };
    }
    else if (target.isStringLiteral() || target.isNumberLiteral()) {
        return {
            kind: "literal",
            value: target.value,
        };
    }
    else if (target.flags & typescript_1.default.TypeFlags.Undefined) {
        return {
            kind: "literal",
            value: undefined,
        };
    }
    else if (target.flags & typescript_1.default.TypeFlags.BooleanLiteral) {
        return {
            kind: "literal",
            value: target.regularType === state.typeChecker.getTrueType() ? true : false,
        };
    }
    diagnostics_1.Diagnostics.error(node, "Unknown type '".concat(target.checker.typeToString(target), "' encountered"));
}
function getBasicUserMacro(state, target) {
    var genericMetadata = state.typeChecker.getTypeOfPropertyOfType(target, "_flamework_macro_generic");
    if (genericMetadata) {
        var targetType = state.typeChecker.getTypeOfPropertyOfType(genericMetadata, "0");
        var metadataType = state.typeChecker.getTypeOfPropertyOfType(genericMetadata, "1");
        if (!targetType)
            return;
        if (!metadataType)
            return;
        var metadata = getMetadataFromType(metadataType);
        if (!metadata)
            return;
        return {
            kind: "generic",
            target: targetType,
            metadata: metadata,
        };
    }
    var callerMetadata = state.typeChecker.getTypeOfPropertyOfType(target, "_flamework_macro_caller");
    if (callerMetadata) {
        var metadata = getMetadataFromType(callerMetadata);
        if (!metadata)
            return;
        return {
            kind: "caller",
            metadata: metadata,
        };
    }
    var hashMetadata = state.typeChecker.getTypeOfPropertyOfType(target, "_flamework_macro_hash");
    if (hashMetadata) {
        var text = state.typeChecker.getTypeOfPropertyOfType(hashMetadata, "0");
        var context = state.typeChecker.getTypeOfPropertyOfType(hashMetadata, "1");
        var isObfuscation = state.typeChecker.getTypeOfPropertyOfType(hashMetadata, "2");
        if (!text || !text.isStringLiteral())
            return;
        if (!context)
            return;
        var contextName = context.isStringLiteral() ? context.value : "@";
        return {
            kind: "literal",
            value: isObfuscation
                ? state.obfuscateText(text.value, contextName)
                : state.buildInfo.hashString(text.value, contextName),
        };
    }
    var nonNullableTarget = target.getNonNullableType();
    var labelMetadata = state.typeChecker.getTypeOfPropertyOfType(nonNullableTarget, "_flamework_macro_tuple_labels");
    if (labelMetadata) {
        return getLabels(state, labelMetadata);
    }
}
function getUserMacroOfType(state, node, target) {
    var manyMetadata = state.typeChecker.getTypeOfPropertyOfType(target, "_flamework_macro_many");
    if (manyMetadata) {
        return getUserMacroOfMany(state, node, manyMetadata);
    }
    else {
        return getBasicUserMacro(state, target);
    }
}
function isTupleType(state, type) {
    return state.typeChecker.isTupleType(type);
}
function isObjectType(type) {
    return type.isIntersection() ? type.types.every(isObjectType) : (type.flags & typescript_1.default.TypeFlags.Object) !== 0;
}
function getParameterCount(state, signature) {
    var length = signature.parameters.length;
    if (typescript_1.default.signatureHasRestParameter(signature)) {
        var restType = state.typeChecker.getTypeOfSymbol(signature.parameters[length - 1]);
        if (isTupleType(state, restType)) {
            return length + restType.target.fixedLength - (restType.target.hasRestElement ? 0 : 1);
        }
    }
    return length;
}
